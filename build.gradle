import edu.sc.seis.launch4j.tasks.Launch4jLibraryTask

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'edu.sc.seis.gradle:launch4j:2.4.2'
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.2.17"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.jetbrains.intellij'
apply plugin: 'edu.sc.seis.launch4j'

def certLoaderPluginName = 'CertLoader'

intellij {
//    localPath 'C:/Program Files/JetBrains/IntelliJ IDEA Community Edition 2017.2.5'
    localPath 'C:\\Program Files (x86)\\JetBrains\\IntelliJ IDEA Community Edition 2016.3.4'
    updateSinceUntilBuild = false
    pluginName certLoaderPluginName
}

repositories {
    mavenCentral()
    flatDir dirs: project.projectDir
}

dependencies {
    compile group: 'com.bulenkov', name: 'darcula'
    compile group: 'net.java.dev.jna', name: 'jna', version: '4.5.0'
    compile group: 'com.google.inject', name: 'guice', version: '4.1.0'
    compile group: 'com.fasterxml.jackson.core', name: "jackson-databind", version: "2.9.4"
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
    compile group: 'com.intellij', name: 'forms_rt', version: '7.0.3'
}

group 'com.scarlatti'
version '3.0.0' // Plugin version

task copyDistribution(type: Copy) {
    from "build/distributions/${certLoaderPluginName}-${version}.zip"
    into "distr"
}

task guiExe(type: Launch4jLibraryTask, group: 'build') {
    outputDir = "/launch4j/CertLoader"
    outfile = "certloader.exe"
    mainClassName = 'com.scarlatti.certloader.App'
    icon = '../../resources/main/key2.ico'  // point to the folder within the build resources
    headerType = "gui"
    companyName = "Scarlatti"
    manifest = "../../resources/main/application.manifest"
    stayAlive = true
}

task fatJar(type: Jar) {
//    manifest {
//        attributes 'Main-Class': 'com.baeldung.fatjar.Application'
//    }
    baseName = rootProject.name  + "asdf"
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task runnableJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.scarlatti.certloader.App'
    }
    baseName = rootProject.name  + "-executable"
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    archiveName = "CertLoader${version}.jar"
}

task guiExe2(type: Launch4jLibraryTask, group: 'build') {

    // these two lines go together...
    copyConfigurable = project.tasks.fatJar.outputs.files
    jar = "lib/${fatJar.outputs.files[0].name}"
    println "fatJar.outputs.files: ${project.tasks.fatJar.outputs.files as List}"
    outputDir = "/launch4j/CertLoader"
    outfile = "certloader.exe"
    mainClassName = 'com.scarlatti.certloader.App'
    icon = '../../resources/main/key2.ico'  // point to the folder within the build resources
    headerType = "gui"
    companyName = "Scarlatti"
    manifest = "../../resources/main/application.manifest"

}

buildPlugin.finalizedBy copyDistribution
buildPlugin.finalizedBy guiExe

task release(type: Zip, group: 'build') {

    from files('/build/launch4j')
    archiveName "CertLoader-${version}.zip"
    destinationDir(file('/release/bin'))

}

task executableJarRelease(type: Zip, group: 'build') {
    dependsOn runnableJar
    println runnableJar.outputs.files.singleFile
    from runnableJar.outputs.files.singleFile
    from file("CertLoader.bat")
    archiveName "CertLoader-${version}-ExecutableJar.zip"
    destinationDir(file('/release/bin'))
}

guiExe.finalizedBy release